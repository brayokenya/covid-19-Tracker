{"ast":null,"code":"import _regeneratorRuntime from\"/Users/briankiiru/Desktop/covid/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/briankiiru/Desktop/covid/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/briankiiru/Desktop/covid/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import React,{useState,useEffect}from'react';import{fetchDailyData}from'../../api';import{Line,Bar}from'react-chartjs-2';import styles from'./Charts.module.css';var Chart=function Chart(_ref){var _ref$data=_ref.data,confirmed=_ref$data.confirmed,recovered=_ref$data.recovered,deaths=_ref$data.deaths,country=_ref.country;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),dailyData=_useState2[0],setDailyData=_useState2[1];useEffect(function(){var fetchAPI=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.t0=setDailyData;_context.next=3;return fetchDailyData();case 3:_context.t1=_context.sent;(0,_context.t0)(_context.t1);case 5:case\"end\":return _context.stop();}}},_callee);}));return function fetchAPI(){return _ref2.apply(this,arguments);};}();fetchAPI();},[]);var lineChart=dailyData.length//0\n?/*#__PURE__*/_jsx(Line,{data:{labels:dailyData.map(function(_ref3){var date=_ref3.date;return date;}),datasets:[{data:dailyData.map(function(_ref4){var confirmed=_ref4.confirmed;return confirmed;}),label:'Infected',borderColor:\"#3333ff\",fill:true},{data:dailyData.map(function(_ref5){var deaths=_ref5.deaths;return deaths;}),label:'Deaths',borderColor:\"red\",backgroundColor:\"rgba(255,0,0, 0.5)\",fill:true}]}}):null;var barChart=confirmed?/*#__PURE__*/_jsx(Bar,{data:{labels:['infected',\"Recovered\",'Deaths'],datasets:[{label:'People',backgroundColor:['rgba(0, 0, 255, 0.5)','rgba(0, 255, 0, 0.5)','rgba(255, 0, 0, 0.5)'],data:[confirmed.value,recovered.value,deaths.value]}]},options:{legend:{display:false},title:{display:true,text:\"Current state in \".concat(country)}}}):null;return/*#__PURE__*/_jsx(\"div\",{className:styles.container,children:country?barChart:lineChart});};export default Chart;","map":{"version":3,"sources":["/Users/briankiiru/Desktop/covid/src/components/Charts/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","Line","Bar","styles","Chart","data","confirmed","recovered","deaths","country","dailyData","setDailyData","fetchAPI","lineChart","length","labels","map","date","datasets","label","borderColor","fill","backgroundColor","barChart","value","legend","display","title","text","container"],"mappings":"0eAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA0C,OAA1C,CACA,OAASC,cAAT,KAA+B,WAA/B,CACA,OAASC,IAAT,CAAeC,GAAf,KAA0B,iBAA1B,CACA,MAAQC,CAAAA,MAAR,KAAoB,qBAApB,CAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,MAAsD,oBAApDC,IAAoD,CAA5CC,SAA4C,WAA5CA,SAA4C,CAAjCC,SAAiC,WAAjCA,SAAiC,CAAtBC,MAAsB,WAAtBA,MAAsB,CAAbC,OAAa,MAAbA,OAAa,eAC7BX,QAAQ,CAAC,EAAD,CADqB,wCACzDY,SADyD,eAC9CC,YAD8C,eAGhEZ,SAAS,CAAC,UAAO,CACb,GAAMa,CAAAA,QAAQ,2FAAG,+IACZD,YADY,uBACOX,CAAAA,cAAc,EADrB,qHAAH,kBAARY,CAAAA,QAAQ,2CAAd,CAIAA,QAAQ,GAEX,CAPQ,CAOP,EAPO,CAAT,CASA,GAAMC,CAAAA,SAAS,CACXH,SAAS,CAACI,MAAO;AAAjB,cAEQ,KAAC,IAAD,EACI,IAAI,CAAK,CACLC,MAAM,CAAEL,SAAS,CAACM,GAAV,CAAc,mBAAGC,CAAAA,IAAH,OAAGA,IAAH,OAAcA,CAAAA,IAAd,EAAd,CADH,CAELC,QAAQ,CAAE,CAAC,CACPb,IAAI,CAAEK,SAAS,CAACM,GAAV,CAAc,mBAAGV,CAAAA,SAAH,OAAGA,SAAH,OAAmBA,CAAAA,SAAnB,EAAd,CADC,CAEPa,KAAK,CAAE,UAFA,CAGPC,WAAW,CAAE,SAHN,CAIPC,IAAI,CAAE,IAJC,CAAD,CAMV,CAEIhB,IAAI,CAAEK,SAAS,CAACM,GAAV,CAAc,mBAAIR,CAAAA,MAAJ,OAAIA,MAAJ,OAAiBA,CAAAA,MAAjB,EAAd,CAFV,CAGIW,KAAK,CAAE,QAHX,CAIIC,WAAW,CAAE,KAJjB,CAKIE,eAAe,CAAE,oBALrB,CAMID,IAAI,CAAE,IANV,CANU,CAFL,CADb,EAFR,CAsBc,IAvBlB,CA2BA,GAAME,CAAAA,QAAQ,CACVjB,SAAS,cAED,KAAC,GAAD,EACI,IAAI,CAAE,CACFS,MAAM,CAAE,CAAC,UAAD,CAAa,WAAb,CAA0B,QAA1B,CADN,CAEFG,QAAQ,CAAE,CAAC,CACPC,KAAK,CAAE,QADA,CAEPG,eAAe,CAAE,CACb,sBADa,CAEb,sBAFa,CAGb,sBAHa,CAFV,CAOPjB,IAAI,CAAE,CAACC,SAAS,CAACkB,KAAX,CAAkBjB,SAAS,CAACiB,KAA5B,CAAmChB,MAAM,CAACgB,KAA1C,CAPC,CAAD,CAFR,CADV,CAcI,OAAO,CAAE,CACLC,MAAM,CAAE,CAACC,OAAO,CAAE,KAAV,CADH,CAELC,KAAK,CAAE,CAACD,OAAO,CAAE,IAAV,CAAgBE,IAAI,4BAAsBnB,OAAtB,CAApB,CAFF,CAdb,EAFC,CAuBD,IAxBZ,CA2BA,mBACI,YAAK,SAAS,CAAEN,MAAM,CAAC0B,SAAvB,UACKpB,OAAO,CAAGc,QAAH,CAAcV,SAD1B,EADJ,CAMH,CAxED,CA0EA,cAAeT,CAAAA,KAAf","sourcesContent":["import React, { useState, useEffect} from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2'\nimport  styles from './Charts.module.css'\n\nconst Chart = ({data: { confirmed, recovered, deaths}, country}) => {\n    const [dailyData, setDailyData]  = useState([]);\n\n    useEffect(() =>  {\n        const fetchAPI = async () => {\n             setDailyData(await fetchDailyData());\n        } \n\n        fetchAPI();\n\n    },[]);\n\n    const lineChart = (\n        dailyData.length //0\n            ? (\n                <Line\n                    data =  {{\n                        labels: dailyData.map(({ date }) => date),\n                        datasets: [{\n                            data: dailyData.map(({ confirmed }) => confirmed),\n                            label: 'Infected',\n                            borderColor: \"#3333ff\",\n                            fill: true,\n                        }, \n                        {\n\n                            data: dailyData.map(( { deaths }) => deaths),\n                            label: 'Deaths',\n                            borderColor: \"red\",\n                            backgroundColor: \"rgba(255,0,0, 0.5)\",\n                            fill: true,\n                    }],\n\n                    }}\n                \n                />) : null\n\n        ); \n\n    const barChart = (\n        confirmed\n            ? (\n                <Bar \n                    data={{\n                        labels: ['infected', \"Recovered\", 'Deaths'],\n                        datasets: [{\n                            label: 'People',\n                            backgroundColor: [\n                                'rgba(0, 0, 255, 0.5)',\n                                'rgba(0, 255, 0, 0.5)',\n                                'rgba(255, 0, 0, 0.5)'\n                            ],\n                            data: [confirmed.value, recovered.value, deaths.value]\n                        }]\n\n                    }}\n                    options={{\n                        legend: {display: false},\n                        title: {display: true, text: `Current state in ${country}`},\n                    }}\n                    \n    \n                    />\n            ) : null\n    )\n\n    return (\n        <div className={styles.container}>\n            {country ? barChart : lineChart}\n\n        </div>\n    )\n}\n\nexport default Chart"]},"metadata":{},"sourceType":"module"}